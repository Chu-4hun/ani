//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.1

use sea_orm::entity::prelude::*;

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "releases"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq)]
pub struct Model {
    pub release_id: i32,
    pub release_type: String,
    pub release_date: Date,
    pub rating: Decimal,
    pub min_age: i32,
    pub director: Option<String>,
    pub author: Option<String>,
    pub studio: Option<String>,
    pub description: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    ReleaseId,
    ReleaseType,
    ReleaseDate,
    Rating,
    MinAge,
    Director,
    Author,
    Studio,
    Description,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    ReleaseId,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = i32;
    fn auto_increment() -> bool {
        true
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    Bookmark,
    Episode,
    Review,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::ReleaseId => ColumnType::Integer.def(),
            Self::ReleaseType => ColumnType::String(Some(255u32)).def(),
            Self::ReleaseDate => ColumnType::Date.def(),
            Self::Rating => ColumnType::Decimal(None).def(),
            Self::MinAge => ColumnType::Integer.def(),
            Self::Director => ColumnType::String(Some(50u32)).def().null(),
            Self::Author => ColumnType::String(Some(50u32)).def().null(),
            Self::Studio => ColumnType::String(Some(50u32)).def().null(),
            Self::Description => ColumnType::String(Some(255u32)).def(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::Bookmark => Entity::has_many(super::bookmark::Entity).into(),
            Self::Episode => Entity::has_many(super::episode::Entity).into(),
            Self::Review => Entity::has_many(super::review::Entity).into(),
        }
    }
}

impl Related<super::bookmark::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Bookmark.def()
    }
}

impl Related<super::episode::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Episode.def()
    }
}

impl Related<super::review::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Review.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
