//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.1

use sea_orm::entity::prelude::*;

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "review"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq)]
pub struct Model {
    pub id: i32,
    pub user_fk: i32,
    pub review_text: String,
    pub rev_data: Date,
    pub rating: Decimal,
    pub release_fk: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Id,
    UserFk,
    ReviewText,
    RevData,
    Rating,
    ReleaseFk,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Id,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = i32;
    fn auto_increment() -> bool {
        true
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    Releases,
    Users,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Id => ColumnType::Integer.def(),
            Self::UserFk => ColumnType::Integer.def(),
            Self::ReviewText => ColumnType::Text.def(),
            Self::RevData => ColumnType::Date.def(),
            Self::Rating => ColumnType::Decimal(None).def(),
            Self::ReleaseFk => ColumnType::Integer.def(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::Releases => Entity::belongs_to(super::releases::Entity)
                .from(Column::ReleaseFk)
                .to(super::releases::Column::ReleaseId)
                .into(),
            Self::Users => Entity::belongs_to(super::users::Entity)
                .from(Column::UserFk)
                .to(super::users::Column::Id)
                .into(),
        }
    }
}

impl Related<super::releases::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Releases.def()
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
